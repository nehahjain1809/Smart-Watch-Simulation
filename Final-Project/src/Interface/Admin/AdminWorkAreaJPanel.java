/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.Admin;

import Business.Enterprise.Enterprise;
import Business.Hospital.Doctor;
import Business.Hospital.LabAssistant;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.Person.Person;
import Business.WorkPlace.Supervisor;
import Business.WorkPlace.TeamLeader;
import java.awt.CardLayout;
import java.io.File;
import java.io.FileNotFoundException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author KRISH PRAVIN JAIN
 */
public class AdminWorkAreaJPanel extends javax.swing.JPanel {

   // private static final String APPOINTMENT_FILE_NAME = "Appointment.csv";
    private static final String DOCTOR_FILE_NAME = "Doctor.csv";
    private static final String TEAMlEADER_FILE_NAME = "TeamLeader.csv";
    private static final String LABASSISTANT_FILE_NAME = "LabAssistant.csv";
    private static final String PERSON_NAME="Person.csv";
    private static final String SUPERVISOR_FILE_NAME="Supervisor.csv";
    private static final String DATA_FILES_HOME = "C:/Users/nehah/Documents/NetBeansProjects/AED-Final-Project/data/";
    private static final String DELIMITER = ",";
    //private EcoSystem system;
    JPanel userProcessContainer;
    private static Enterprise enterprise;
    /** Creates new form AdminWorkAreaJPanel */
    public AdminWorkAreaJPanel(JPanel userProcessContainer, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        valueLabel.setText(enterprise.getName());
      //  setLoadButtons();
        
    }
    
//    public void setLoadButtons(){
//        JOptionPane.showMessageDialog(null, enterprise.getEnterpriseType().getValue().toString());
//        if(enterprise.getEnterpriseType().getValue().toString().equals("Customer")){
//         btnLoadPersonData.setEnabled(true);
//         btnLoadCompanyData.setEnabled(false);
//         btnLoadHospitalData.setEnabled(false);
//        }
//        else if(enterprise.getEnterpriseType().getValue().equals("Company")){
//            btnLoadCompanyData.setEnabled(true);
//             btnLoadPersonData.setEnabled(false);
//             btnLoadHospitalData.setEnabled(false);
//        }
//        else if(enterprise.getEnterpriseType().getValue().equals("Hospital")){
//            btnLoadHospitalData.setEnabled(true);
//            btnLoadCompanyData.setEnabled(false);
//            btnLoadPersonData.setEnabled(false);
//        }
//       
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        userJButton = new javax.swing.JButton();
        manageEmployeeJButton = new javax.swing.JButton();
        manageOrganizationJButton = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(102, 102, 102));
        setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(51, 51, 51));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("My Work Area -Aminstrative Role");

        userJButton.setBackground(new java.awt.Color(255, 255, 255));
        userJButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        userJButton.setText("Manage User");
        userJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userJButtonActionPerformed(evt);
            }
        });

        manageEmployeeJButton.setBackground(new java.awt.Color(255, 255, 255));
        manageEmployeeJButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        manageEmployeeJButton.setText("Manage Employee");
        manageEmployeeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageEmployeeJButtonActionPerformed(evt);
            }
        });

        manageOrganizationJButton.setBackground(new java.awt.Color(255, 255, 255));
        manageOrganizationJButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        manageOrganizationJButton.setText("Manage Organization");
        manageOrganizationJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageOrganizationJButtonActionPerformed(evt);
            }
        });

        enterpriseLabel.setBackground(new java.awt.Color(51, 51, 51));
        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel.setForeground(new java.awt.Color(255, 255, 255));
        enterpriseLabel.setText("EnterPrise :");

        valueLabel.setBackground(new java.awt.Color(51, 51, 51));
        valueLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        valueLabel.setForeground(new java.awt.Color(255, 255, 255));
        valueLabel.setText("<value>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(335, 335, 335)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(userJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(85, 85, 85)
                            .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(manageOrganizationJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(manageEmployeeJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(404, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(valueLabel))
                .addGap(58, 58, 58)
                .addComponent(manageOrganizationJButton)
                .addGap(32, 32, 32)
                .addComponent(manageEmployeeJButton)
                .addGap(30, 30, 30)
                .addComponent(userJButton)
                .addContainerGap(252, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void userJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userJButtonActionPerformed
        // TODO add your handling code here:
        ManageUserAccountJPanel muajp = new ManageUserAccountJPanel(userProcessContainer, enterprise);
        userProcessContainer.add("ManageUserAccountJPanel", muajp);

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_userJButtonActionPerformed

    private void manageEmployeeJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageEmployeeJButtonActionPerformed

        ManageEmployeeJPanel manageEmployeeJPanel = new ManageEmployeeJPanel(userProcessContainer, enterprise.getOrganizationDirectory(), enterprise);
        userProcessContainer.add("manageEmployeeJPanel", manageEmployeeJPanel);

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);

    }//GEN-LAST:event_manageEmployeeJButtonActionPerformed

    private void manageOrganizationJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageOrganizationJButtonActionPerformed

        ManageOrganizationJPanel manageOrganizationJPanel = new ManageOrganizationJPanel(userProcessContainer, enterprise.getOrganizationDirectory(),enterprise);
        userProcessContainer.add("manageOrganizationJPanel", manageOrganizationJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_manageOrganizationJButtonActionPerformed

    private static Set<Person> parsePersonData(Collection<String []> personData)
    {
        Set<Person> persons = new HashSet<>();
        for (String[] personDataRow : personData) {
            //Person person = personList.addPerson();
            OrganizationDirectory orgList=enterprise.getOrganizationDirectory();
            for(Organization org:orgList.getOrganizationList()){
                if(org.getName().equals("Customer")){
                    SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");
                    Person person=org.getPersonDirectory().findPersonByPersonName(personDataRow[0]);
                    person.setPersonAge(Integer.parseInt(personDataRow[1]));
                    person.setPersonType(personDataRow[2]);
                    person.setGender(personDataRow[6]);
                    person.setStatus(personDataRow[7]);
                    person.setHeight(Float.parseFloat(personDataRow[8]));
                    person.setWeight(Float.parseFloat(personDataRow[9]));
                    person.setMyVaccationBalance(2);
                    persons.add(person);
                }
            }
            
            
                    
       }
        
       return persons;
    }
    
    private static Set<Supervisor> parseSupervisorData(Collection<String []> supervisorData)
    {
        Set<Supervisor> supervisors = new HashSet<>();
        for (String[] supervisorDataRow : supervisorData) {
            OrganizationDirectory orgList=enterprise.getOrganizationDirectory();
            for(Organization org:orgList.getOrganizationList()){
                if(org.getName().equals("Supervisor")){
                    Supervisor supervisor=org.getSupervisorDirectory().findPSupervisorByUserName(supervisorDataRow[1]);
                    supervisor.setSupervisorName(supervisorDataRow[0]);
                    supervisors.add(supervisor);
                }
       }
        }
        
       return supervisors;
    }
    
        private static Set<TeamLeader> parseTeamLeaderData(Collection<String []> teamLeaderData)
    {
        Set<TeamLeader> teamLeaders = new HashSet<>();
        for (String[] teamLeaderDataRow : teamLeaderData) {
            OrganizationDirectory orgList=enterprise.getOrganizationDirectory();
            for(Organization org:orgList.getOrganizationList()){
                if(org.getName().equals("TeamLeader")){
                    TeamLeader teamleader=org.getTeamLeaderDirectory().findTeamLeaderByUserName(teamLeaderDataRow[1]);
                    teamleader.setTeamleaderName(teamLeaderDataRow[0]);
                    teamLeaders.add(teamleader);
                }
       }
        }
        
       return teamLeaders;
    }
        
    private static Set<Doctor> parseDoctorData(Collection<String []> teamLeaderData)
    {
        Set<Doctor> doctors = new HashSet<>();
        for (String[] teamLeaderDataRow : teamLeaderData) {
            OrganizationDirectory orgList=enterprise.getOrganizationDirectory();
            for(Organization org:orgList.getOrganizationList()){
                if(org.getName().equals("Doctor")){
                    Doctor doctor=org.getDoctorDirectory().searchDoctorbyName(teamLeaderDataRow[1]);
                    doctor.setDoctorName(teamLeaderDataRow[0]);
                    doctors.add(doctor);
                }
       }
        }
        
       return doctors;
    }
                
    private static Set<LabAssistant> parseLabAssistantData(Collection<String []> labAssistantData)
    {
        Set<LabAssistant> assistants = new HashSet<>();
        for (String[] teamLeaderDataRow : labAssistantData) {
            OrganizationDirectory orgList=enterprise.getOrganizationDirectory();
            for(Organization org:orgList.getOrganizationList()){
                if(org.getName().equals("LabAssistant")){
                    LabAssistant assistant=org.getLabAssistantDirectory().searchAssistantbyName(teamLeaderDataRow[1]);
                    assistant.setAssistantName(teamLeaderDataRow[0]);
                    assistants.add(assistant);
                }
       }
        }
        
       return assistants ;
    }
    
        
    private static Collection<String []> loadDataFromCsvFile(String filePath)
    {
        File inputFile = new File(filePath);
        Collection<String []> tableData = new ArrayList<>();
        try {
            Scanner scanner = new Scanner(inputFile);
            boolean skippedHeader = false;
            while(scanner.hasNextLine()) {
                if (!skippedHeader) {
                    skippedHeader = true;
                    scanner.nextLine();
                    continue;
                }
                //String DELIMITER;
                tableData.add(scanner.nextLine().split(DELIMITER));
            }
        } catch(FileNotFoundException e) {
            e.printStackTrace();
        }
        
       return tableData;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton manageEmployeeJButton;
    private javax.swing.JButton manageOrganizationJButton;
    private javax.swing.JButton userJButton;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables
}
