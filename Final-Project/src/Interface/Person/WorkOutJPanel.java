/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.Person;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Helper.GraphHelper;
import Business.Hospital.VitalSigns;
import Business.Network.Network;
import Business.Organization.CustomerOrganization;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.Person.Person;
import Business.Routine.WorkOut;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequestPersonDoc;
import Interface.Hospital.Doctor.DoctorJPanel;
import static Interface.Person.MyWorkPlaceJPanel1.counter;
import static Interface.Person.MyWorkPlaceJPanel1.workScheduleMap;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;

/**
 *
 * @author KRISH PRAVIN JAIN
 */
public class WorkOutJPanel extends javax.swing.JPanel {

    /**
     * Creates new form WorkOutJPanel
     */
    JDatePickerImpl datePicker;
    JPanel userProcessContainer;
    UserAccount userAccount;
    CustomerOrganization customerOrganization;
    Enterprise inEnterprise;
    Network n;
    Person p;
    EcoSystem system;
    Timer t1;
    float caloriesBurnt;
    private static float walkCalBurnt=(float) 0.5;
    private static float runCalBurnt=(float) 0.7;
    private static float gymCalBurnt=(float) 1.5;
    private static float totalBreak=0;
    private static float totalWork=0;
    Date startDate;
    Date endDate;
    public static int counter=0;
    private SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy HH:mm:ss");
    
    Map< String, Float> workOutMap=new HashMap< String, Float>();

    WorkOutJPanel(JPanel userProcessContainer, 
            UserAccount userAccount, 
            CustomerOrganization customerOrganization, 
            Enterprise inEnterprise, 
            EcoSystem system, 
            Network n,
            Person p) {
       initComponents();
             
        
        this.userProcessContainer=userProcessContainer;
        this.userAccount=userAccount;
        this.customerOrganization=customerOrganization;
        this.n=n;
        this.system=system;
        this.inEnterprise=inEnterprise;
        this.p=p;
        
        targetCalLbl.setText(String.valueOf(p.getCaloriesburnThreshold()));
        burntCalLbl.setText(String.valueOf(0));
        bpmLabel.setText(String.valueOf(0));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        workoutCombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        startBtn = new javax.swing.JButton();
        stopBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        consoletxtArea = new javax.swing.JTextArea();
        workoutChartPanel = new javax.swing.JPanel();
        btnBack = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        bpmLabel = new javax.swing.JLabel();
        targetCalLbl = new javax.swing.JLabel();
        burntCalLbl = new javax.swing.JLabel();
        dateChooser = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        triggerCheck = new javax.swing.JCheckBox();

        setBackground(new java.awt.Color(102, 102, 102));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Select Work Out Type");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 90, -1, -1));

        workoutCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Walk", "Run", "Gym" }));
        add(workoutCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 90, 210, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("My Work-Out Tracker Area");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 10, -1, -1));

        startBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        startBtn.setText("Start");
        startBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBtnActionPerformed(evt);
            }
        });
        add(startBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 70, 100, -1));

        stopBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        stopBtn.setText("Stop");
        stopBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopBtnActionPerformed(evt);
            }
        });
        add(stopBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 110, 100, -1));

        consoletxtArea.setColumns(20);
        consoletxtArea.setRows(5);
        jScrollPane1.setViewportView(consoletxtArea);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 160, 1030, 150));

        workoutChartPanel.setBackground(new java.awt.Color(255, 255, 255));
        workoutChartPanel.setLayout(new java.awt.BorderLayout());
        add(workoutChartPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 380, 1020, 200));

        btnBack.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 600, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Target ");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 60, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Calories Burnt");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 60, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("BPM");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 60, -1, -1));

        bpmLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        bpmLabel.setForeground(new java.awt.Color(255, 255, 255));
        bpmLabel.setText("jLabel6");
        add(bpmLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 90, -1, -1));

        targetCalLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        targetCalLbl.setForeground(new java.awt.Color(255, 255, 255));
        targetCalLbl.setText("targetCalLabel");
        add(targetCalLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 90, -1, -1));

        burntCalLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        burntCalLbl.setForeground(new java.awt.Color(255, 255, 255));
        burntCalLbl.setText("burntCalLabel");
        add(burntCalLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 90, -1, -1));
        add(dateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 50, 270, -1));

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setText("Done");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 70, 120, -1));

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton2.setText("view graph");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 330, 200, -1));

        triggerCheck.setBackground(new java.awt.Color(0, 0, 0));
        triggerCheck.setForeground(new java.awt.Color(255, 255, 255));
        triggerCheck.setText("Trigger");
        triggerCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                triggerCheckActionPerformed(evt);
            }
        });
        add(triggerCheck, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 110, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        MyRoutineJPanel1 sysAdminwjp = ( MyRoutineJPanel1) component;
        //sysAdminwjp.populateTree();
        sysAdminwjp.populateWorkoutTable();

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        
        
        
    }//GEN-LAST:event_btnBackActionPerformed

    private void startBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBtnActionPerformed
        // TODO add your handling code here:
        
        int high=70;
        int low=50;
        int highbp=140;
        int lowbp=80;
        caloriesBurnt=0;
        Random r = new Random();
        
        String action=workoutCombo.getSelectedItem().toString();
        
        Calendar cal = Calendar.getInstance();
        ActionListener updateClock = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                startDate=cal.getTime();
                cal.add(Calendar.SECOND,20);
                String newTime = sdf.format(cal.getTime());
                Date strDate = null;
                int heartBeat=0;
                int bloodpressure=0;
                int trigger=30;
                
                try {
                    strDate = sdf.parse(newTime);
                } catch (ParseException ex) {
                    System.out.println(e);
                }
                if(action.equals("Walk")){
                    caloriesBurnt=caloriesBurnt+ walkCalBurnt;
                    p.setCalories(p.getCalories()-caloriesBurnt);
                    if(!triggerCheck.isSelected()){
                    heartBeat= (int)((r.nextInt(high-low)+low));
                    }
                    else{
                     heartBeat= (int)((r.nextInt(high-low)+low*trigger));    
                    }
                    
                    
                    if (!workOutMap.containsKey(action)) {
                        workOutMap.put(action, caloriesBurnt);

                     }
                     else{
                       for (Map.Entry<String, Float> entry : workOutMap.entrySet()) {
                         if(entry.getKey().equals(action)){  
                         entry.setValue(entry.getValue()+caloriesBurnt);
                         }
                        }
                    }
                }
                if(action.equals("Run")){
                    caloriesBurnt=caloriesBurnt+ runCalBurnt;
                    p.setCalories(p.getCalories()-caloriesBurnt);
                    if(!triggerCheck.isSelected()){
                    heartBeat= (int)((r.nextInt(high-low)+low)+5);
                    }
                    else{
                        heartBeat= (int)((r.nextInt(high-low)+low)+5+trigger);
                    }
                    if (!workOutMap.containsKey(action)) {
                        workOutMap.put(action, caloriesBurnt);

                     }
                     else{
                       for (Map.Entry<String, Float> entry : workOutMap.entrySet()) {
                         if(entry.getKey().equals(action)){  
                         entry.setValue(entry.getValue()+caloriesBurnt);
                         }
                        }
                    }
                }
                if(action.equals("Gym")){
                    caloriesBurnt=caloriesBurnt+ gymCalBurnt;
                    p.setCalories(p.getCalories()-caloriesBurnt);
                    if(!triggerCheck.isSelected()){
                    heartBeat= (int)((r.nextInt(high-low)+low)+7);
                    }
                    else{
                        heartBeat= (int)((r.nextInt(high-low)+low)+7+trigger);
                    }
                    if (!workOutMap.containsKey(action)) {
                        workOutMap.put(action, caloriesBurnt);

                     }
                     else{
                       for (Map.Entry<String, Float> entry : workOutMap.entrySet()) {
                         if(entry.getKey().equals(action)){  
                         entry.setValue(entry.getValue()+caloriesBurnt);
                         }
                        }
                    }
                }
                
                    
                     
                   
        
                if(Float.parseFloat(burntCalLbl.getText())>=Float.parseFloat(targetCalLbl.getText())-10){
                        JOptionPane.showMessageDialog(null, "You are reaching the threshold for the day. Can stop your Workout");
                }
                if(heartBeat<50 || heartBeat>100){
                     sendAutomatedRequest();                  
                   // JOptionPane.showMessageDialog(null, "Abnormal HeartBeat detected. Suggested to stop your workout!. Vital Signs Repored to your doctor");
                }
                burntCalLbl.setText(String.valueOf((Float.parseFloat(burntCalLbl.getText())+caloriesBurnt)));
                consoletxtArea.append(" Status at-> "+" "+strDate+" " + action + " "+ caloriesBurnt+"\n");
                bpmLabel.setText(String.valueOf(heartBeat));
                
                

            }
        };
        
            t1 = new Timer(1000, updateClock);
            t1.start();
        
        
    }//GEN-LAST:event_startBtnActionPerformed
    public void sendAutomatedRequest(){
        HospitalEnterprise hospitalEnterprise = null;
        for(Network network : system.getNetworkList()){
            for(Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()){
               if(e.getEnterpriseType().equals(Enterprise.EnterpriseType.Hospital)){
                    hospitalEnterprise = (HospitalEnterprise)e;
                    System.out.println("Found Hospital Enterprise");
               }
            }
        }
        
        WorkRequestPersonDoc workRequestPersonDoc = new WorkRequestPersonDoc();
        workRequestPersonDoc.setReasonMsg("Abnormal Heart Rate due to workout(Automated) ");
        workRequestPersonDoc.setDoctor(userAccount.getP().getMyDoctor());
        workRequestPersonDoc.setReqDate(dateChooser.getDate());
        workRequestPersonDoc.setPerson(userAccount.getP());
        
        Organization org = null;
        if(hospitalEnterprise != null){
            for(Organization organization : hospitalEnterprise.getOrganizationDirectory().getOrganizationList()){
                System.out.println("organization name: "+organization.getName());
                if(organization instanceof DoctorOrganization){
                    org = organization;
                    break;
                }
            }
        }
        
        else{
            JOptionPane.showConfirmDialog(null, "No Hospital found");
        }
        if(org != null){
            org.getWorkQueuePersonDoc().getWorkRequestListPersonDoc().add(workRequestPersonDoc);
            userAccount.getWorkQueuePersonDoc().getWorkRequestListPersonDoc().add(workRequestPersonDoc);
            JOptionPane.showMessageDialog(null, "Abnormal Heart rate detected during workout. Report sent to Doctor");
            System.out.println("work request added");
        }
    }
    
    private void stopBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBtnActionPerformed
        // TODO add your handling code here:
        t1.stop();;
    }//GEN-LAST:event_stopBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        float walkCalories=0;
        float runcalories=0;
        float gymcalories=0;
        int heartRate=Integer.parseInt(bpmLabel.getText());
        for (Map.Entry<String, Float> entry : workOutMap.entrySet()) {
                         if(entry.getKey().equals("Walk")){  
                         walkCalories=entry.getValue();
                         }
                         if(entry.getKey().equals("Run")){  
                         runcalories=entry.getValue();
                         }
                         if(entry.getKey().equals("Gym")){  
                         gymcalories=entry.getValue();
                         }
                         
        }
         
        WorkOut wo=customerOrganization.getWorkoutDirectory().addWorkOut();
        wo.setDate(dateChooser.getDate());
        wo.setP(p);
        wo.setWalking_calories(walkCalories);
        wo.setRunning_calories(runcalories);
        wo.setGyming_calories(gymcalories);
        wo.setTotal_calories_burnt(walkCalories+runcalories+gymcalories);
        VitalSigns v=customerOrganization.getVitalsignDirectory().addVitalSigns();
        v.setHeartRate(heartRate);
        v.setBloodPressure(120);
        v.setP(p);
        wo.setVitalSigns(v);
        p.getVitalSignHistory().add(v);
        p.getWorkOutList().add(wo);
        
        WorkOutGraph();
         
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        WorkOutGraph();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void triggerCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_triggerCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_triggerCheckActionPerformed

    public void WorkOutGraph(){
        Map<String, Float> walkMap= new HashMap<String,Float>();
        Map<String, Float> runMap= new HashMap<String,Float>();
        Map<String, Float> gymMap= new HashMap<String,Float>();
        GraphHelper gh=new GraphHelper();
        JFreeChart chart= gh.showChart3(workOutMap);
        ChartPanel cp=new ChartPanel(chart);
        workoutChartPanel.removeAll();
        workoutChartPanel.add(cp,BorderLayout.CENTER);
        workoutChartPanel.validate();
        workoutChartPanel.repaint();
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bpmLabel;
    private javax.swing.JButton btnBack;
    private javax.swing.JLabel burntCalLbl;
    private javax.swing.JTextArea consoletxtArea;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton startBtn;
    private javax.swing.JButton stopBtn;
    private javax.swing.JLabel targetCalLbl;
    private javax.swing.JCheckBox triggerCheck;
    private javax.swing.JPanel workoutChartPanel;
    private javax.swing.JComboBox workoutCombo;
    // End of variables declaration//GEN-END:variables
}
