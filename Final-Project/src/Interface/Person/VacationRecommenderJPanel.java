/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.Person;

import Business.Helper.VacationHelper;
import Business.Hospital.AppointmentDirectory;
import Business.Hospital.DoctorDirectory;
import Business.Hospital.VitalSignsDirectoryy;
import Business.Person.Person;
import Business.Person.PersonDirectory;
import Business.Recommendations.RecommendationDirectory;
import Business.Routine.FoodConsumptionTrackerDirectory;
import Business.Routine.SleepDirectory;
import Business.UserAccount.UserAccountDirectory;
import Business.WorkPlace.HolidayList;
import Business.WorkPlace.MyVaccationHistory;
import Business.WorkPlace.SupervisorDirectory;
import Business.WorkPlace.*;
import java.time.LocalDate;
import java.time.Month;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import static java.util.concurrent.TimeUnit.DAYS;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nehah
 */
public class VacationRecommenderJPanel extends javax.swing.JPanel {

    /**
     * Creates new form VacationRecommenderJPanel
     */
   
        Calendar cal = Calendar.getInstance();
        JPanel userProcessContainer;
        Person p;
        DoctorDirectory	doctorList;
        UserAccountDirectory	uad;
        PersonDirectory	personList;
        SupervisorDirectory	supervisorList;
        MyVaccationHistory	leaveList;
        HolidayList	holidayList;
      //  VaccationHelper1	vaccationHelper;
        AppointmentDirectory	appointmentDirectory;
        SleepDirectory	sleepDirectory;
        FoodConsumptionTrackerDirectory	foodTracker;
        VitalSignsDirectoryy	vitalSignList;
        VacationHelper vh;
        List<LocalDate> getBestStartDates;
        LeaveRequestHistory leaveRequestDirectory;
        RecommendationDirectory recommmendationDirectory;
    public VacationRecommenderJPanel(JPanel userProcessContainer, 
            Person p,
            DoctorDirectory	doctorList,
            UserAccountDirectory	uad,
            PersonDirectory	personList,
            SupervisorDirectory	supervisorList,
            MyVaccationHistory	leaveList,
            HolidayList	holidayList,
          //  VaccationHelper1	vaccationHelper,
            AppointmentDirectory	appointmentDirectory,
            SleepDirectory	sleepDirectory,
            FoodConsumptionTrackerDirectory	foodTracker,
            VitalSignsDirectoryy	vitalSignList,
            LeaveRequestHistory leaveRequestDirectory,
            RecommendationDirectory recommmendationDirectory
           
) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    initComponents();
    this.userProcessContainer=userProcessContainer;
    this.p=p;
    this.doctorList=doctorList;
    this.uad=uad;
    this.personList=personList;
    this.supervisorList=supervisorList;
    this.leaveList=leaveList;
    this.holidayList=holidayList;
    //this.vaccationHelper=vaccationHelper;
    this.appointmentDirectory=appointmentDirectory;
    this.sleepDirectory=sleepDirectory;
    this.foodTracker=foodTracker;
    this.vitalSignList=vitalSignList;
    this.leaveRequestDirectory=leaveRequestDirectory;
    this.recommmendationDirectory=recommmendationDirectory;
    vh=new  VacationHelper(holidayList.getHolidayList());
    getBestStartDates=vh.getBestVacationStartDates(p.getMyVaccationBalance());
    populateTable();
    
    }

    
    public void populateTable(){
    DefaultTableModel dtm =(DefaultTableModel)tblVaccationRecommender.getModel();
    dtm.setRowCount(0);
    //for (LocalDate l:getBestStartDates)
    for(int i=0;i<(getBestStartDates.size());i++)    
    {
        Object row[]= new Object [3];
        row[0]=getBestStartDates.get(i);
        row[1]=getBestStartDates.get(i+1);
        i=i+1;
        dtm.addRow(row);
    }
    }
    
    private void populateLeaveRequestTable() {
    DefaultTableModel dtm =(DefaultTableModel)tblLeaveRequests.getModel();
    dtm.setRowCount(0);
    //for (LocalDate l:getBestStartDates)
    for(LeaveRequest l: leaveRequestDirectory.getLeaveRequestList())
    {
        Object row[]= new Object [5];
        row[0]=l.getP().getPersonName().toString();
        row[1]=l.getVaccStartDate().toString();
        row[2]=l.getVaccStartDate().toString();
        row[3]=l.getS().getSupervisorName();
        row[4]=l.getStatus();
        
        dtm.addRow(row);
    }
   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblVaccationRecommender = new javax.swing.JTable();
        btnRequestLeave = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblLeaveRequests = new javax.swing.JTable();

        tblVaccationRecommender.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vaccation STartDate", "Vaccation End Date"
            }
        ));
        jScrollPane1.setViewportView(tblVaccationRecommender);

        btnRequestLeave.setText("Request Leave");
        btnRequestLeave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRequestLeaveActionPerformed(evt);
            }
        });

        tblLeaveRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Person", "StartDate", "End Date", "Supervisor", "Status"
            }
        ));
        jScrollPane2.setViewportView(tblLeaveRequests);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 786, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 786, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(627, 627, 627)
                            .addComponent(btnRequestLeave, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRequestLeave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(386, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRequestLeaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRequestLeaveActionPerformed
        // TODO add your handling code here:
        int selectedRow=tblVaccationRecommender.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select a row");
        }
        else{
            LeaveRequest lr=leaveRequestDirectory.addLeavRequest();
            lr.setP(p);
            lr.setS(p.getMySupervisor());
            lr.setVaccStartDate((Date)tblVaccationRecommender.getValueAt(selectedRow, 0));
            lr.setVaccEndDate((Date)tblVaccationRecommender.getValueAt(selectedRow, 1));
            lr.setStatus("Pending");
            p.getLeaveRequestTracker().add(lr);
            p.getMySupervisor().getLeaveList().add(lr);
            populateLeaveRequestTable();
        }
    }//GEN-LAST:event_btnRequestLeaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRequestLeave;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblLeaveRequests;
    private javax.swing.JTable tblVaccationRecommender;
    // End of variables declaration//GEN-END:variables

    
}
